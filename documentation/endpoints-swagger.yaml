openapi: 3.0.0
info:
  title: Banking API
  description: API for managing users, bank accounts, and transactions.
  version: 1.0.0

servers:
  - url: http://localhost:5000/api
    description: Local development server

paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request (e.g., email already in use)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{user_id}:
    get:
      summary: Get a specific user by ID
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an existing user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already in use or invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Cannot delete user with associated bank accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /accounts:
    post:
      summary: Create a new bank account
      tags:
        - Bank Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBankAccountRequest'
      responses:
        '201':
          description: The created bank account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'

  /accounts/{account_id}:
    put:
      summary: Update an existing bank account
      tags:
        - Bank Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBankAccountRequest'
      responses:
        '200':
          description: The updated bank account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
    delete:
      summary: Delete a bank account
      tags:
        - Bank Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Bank account and associated transactions deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Bank account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions:
    post:
      summary: Create a new transaction
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionRequest'
      responses:
        '201':
          description: The created transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Currency mismatch or other validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/account/{bank_account_id}:
    get:
      summary: Get all transactions for a bank account
      tags:
        - Transactions
      parameters:
        - name: bank_account_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of transactions for the bank account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '404':
          description: No transactions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{transaction_id}:
    get:
      summary: Get a specific transaction by ID
      tags:
        - Transactions
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a transaction
      tags:
        - Transactions
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email
    BankAccount:
      type: object
      properties:
        id:
          type: integer
        account_number:
          type: string
        balance:
          type: number
          format: float
        currency:
          type: string
        user_id:
          type: integer
    CreateBankAccountRequest:
      type: object
      properties:
        account_number:
          type: string
        balance:
          type: number
          format: float
        currency:
          type: string
        user_id:
          type: integer
      required:
        - account_number
        - balance
        - currency
        - user_id
    Transaction:
      type: object
      properties:
        id:
          type: integer
        transaction_type:
          type: string
          enum:
            - deposit
            - transfer
        currency:
          type: string
        amount:
          type: number
          format: float
        timestamp:
          type: string
          format: date-time
    CreateTransactionRequest:
      type: object
      properties:
        bank_account_id:
          type: integer
        transaction_type:
          type: string
          enum:
            - deposit
            - transfer
        currency:
          type: string
        amount:
          type: number
          format: float
      required:
        - bank_account_id
        - transaction_type
        - currency
        - amount
    SuccessResponse:
      type: object
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string